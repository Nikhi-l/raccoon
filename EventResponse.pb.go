// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: odpf/raccoon/EventResponse.proto

package raccoon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_UNKNOWN_STATUS Status = 0
	Status_SUCCESS        Status = 1
	Status_ERROR          Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "SUCCESS",
		2: "ERROR",
	}
	Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"SUCCESS":        1,
		"ERROR":          2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_odpf_raccoon_EventResponse_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_odpf_raccoon_EventResponse_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_odpf_raccoon_EventResponse_proto_rawDescGZIP(), []int{0}
}

type Code int32

const (
	//
	//`UNQKNOWN_CODE` indicates no appropriate/existing code can describe it.
	Code_UNKNOWN_CODE Code = 0
	//
	//`OK` indicates the request is processed successfully.
	Code_OK Code = 1
	//
	//`BAD_REQUEST` indicates there is something wrong with the request.
	Code_BAD_REQUEST Code = 2
	//
	//`INTERNAL_ERROR` indicates that Raccoon encountered an unexpected condition that prevented it from fulfilling the request.
	Code_INTERNAL_ERROR Code = 3
	//
	//`MAX_CONNECTION_LIMIT_REACHED` indicates that Raccoon is unable to accepts new connection due to max connection is reached.
	//
	//To prevent Raccoon from eating up resources, connection limit needs to be set. The limit is configurable on Raccoon by setting `SERVER_WEBSOCKET_MAX_CONN`
	Code_MAX_CONNECTION_LIMIT_REACHED Code = 4
	//
	//`MAX_USER_LIMIT_REACHED` indicates that existing connection with the same ID.
	//
	//Raccoon ensures unique connection using unique identifier passed from the header
	//the first time Websocket connection is established. The header key that
	//contains unique identifier is configurable on Raccoon by setting `SERVER_WEBSOCKET_CONN_UNIQ_ID_HEADER`
	Code_MAX_USER_LIMIT_REACHED Code = 5
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "UNKNOWN_CODE",
		1: "OK",
		2: "BAD_REQUEST",
		3: "INTERNAL_ERROR",
		4: "MAX_CONNECTION_LIMIT_REACHED",
		5: "MAX_USER_LIMIT_REACHED",
	}
	Code_value = map[string]int32{
		"UNKNOWN_CODE":                 0,
		"OK":                           1,
		"BAD_REQUEST":                  2,
		"INTERNAL_ERROR":               3,
		"MAX_CONNECTION_LIMIT_REACHED": 4,
		"MAX_USER_LIMIT_REACHED":       5,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_odpf_raccoon_EventResponse_proto_enumTypes[1].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_odpf_raccoon_EventResponse_proto_enumTypes[1]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_odpf_raccoon_EventResponse_proto_rawDescGZIP(), []int{1}
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//`status` denotes status of the request.
	//
	//Only 3 values are valid. `SUCCESS` means the the request is processed
	//successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
	//means Raccoon unable to determine whether the request is success or not.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=odpf.raccoon.Status" json:"status,omitempty"`
	//
	//`code` gives more detail of what happened to the request.
	//
	//Details of available `code` can be seen below.
	Code Code `protobuf:"varint,2,opt,name=code,proto3,enum=odpf.raccoon.Code" json:"code,omitempty"`
	//
	//`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
	SentTime int64 `protobuf:"varint,3,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	//
	//`reason` is additional-human readable information to provide more context to `status` and `code`.
	//
	//There is no predefined structure for this. The value is arbitrary.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	//
	//`data` is arbitrary extra metadata.
	//
	//Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
	//of `data`. The client may fetch req_guid as key to get the `req_guid` value.
	Data map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_odpf_raccoon_EventResponse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_odpf_raccoon_EventResponse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_odpf_raccoon_EventResponse_proto_rawDescGZIP(), []int{0}
}

func (x *EventResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN_STATUS
}

func (x *EventResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_UNKNOWN_CODE
}

func (x *EventResponse) GetSentTime() int64 {
	if x != nil {
		return x.SentTime
	}
	return 0
}

func (x *EventResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EventResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_odpf_raccoon_EventResponse_proto protoreflect.FileDescriptor

var file_odpf_raccoon_EventResponse_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e,
	0x22, 0x8e, 0x02, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x64,
	0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x42, 0x4e, 0x0a,
	0x16, 0x69, 0x6f, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x42, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_odpf_raccoon_EventResponse_proto_rawDescOnce sync.Once
	file_odpf_raccoon_EventResponse_proto_rawDescData = file_odpf_raccoon_EventResponse_proto_rawDesc
)

func file_odpf_raccoon_EventResponse_proto_rawDescGZIP() []byte {
	file_odpf_raccoon_EventResponse_proto_rawDescOnce.Do(func() {
		file_odpf_raccoon_EventResponse_proto_rawDescData = protoimpl.X.CompressGZIP(file_odpf_raccoon_EventResponse_proto_rawDescData)
	})
	return file_odpf_raccoon_EventResponse_proto_rawDescData
}

var file_odpf_raccoon_EventResponse_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_odpf_raccoon_EventResponse_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_odpf_raccoon_EventResponse_proto_goTypes = []interface{}{
	(Status)(0),           // 0: odpf.raccoon.Status
	(Code)(0),             // 1: odpf.raccoon.Code
	(*EventResponse)(nil), // 2: odpf.raccoon.EventResponse
	nil,                   // 3: odpf.raccoon.EventResponse.DataEntry
}
var file_odpf_raccoon_EventResponse_proto_depIdxs = []int32{
	0, // 0: odpf.raccoon.EventResponse.status:type_name -> odpf.raccoon.Status
	1, // 1: odpf.raccoon.EventResponse.code:type_name -> odpf.raccoon.Code
	3, // 2: odpf.raccoon.EventResponse.data:type_name -> odpf.raccoon.EventResponse.DataEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_odpf_raccoon_EventResponse_proto_init() }
func file_odpf_raccoon_EventResponse_proto_init() {
	if File_odpf_raccoon_EventResponse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_odpf_raccoon_EventResponse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_odpf_raccoon_EventResponse_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_odpf_raccoon_EventResponse_proto_goTypes,
		DependencyIndexes: file_odpf_raccoon_EventResponse_proto_depIdxs,
		EnumInfos:         file_odpf_raccoon_EventResponse_proto_enumTypes,
		MessageInfos:      file_odpf_raccoon_EventResponse_proto_msgTypes,
	}.Build()
	File_odpf_raccoon_EventResponse_proto = out.File
	file_odpf_raccoon_EventResponse_proto_rawDesc = nil
	file_odpf_raccoon_EventResponse_proto_goTypes = nil
	file_odpf_raccoon_EventResponse_proto_depIdxs = nil
}
