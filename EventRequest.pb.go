// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: odpf/raccoon/EventRequest.proto

package raccoon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//`EventRequest` defines the contract to push events to Raccoon
//
//An `EventRequest` allows you to push more than one events(batch). The events
//are wrapped inside `events` repeated field. All of the fields on `EventRequest`
//are required.
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//`req_guid` is unique identifier of the request the client is making.
	//
	//Raccoon uses the identifier to send response of the request. The client can handle the
	//response accordingly. For example, the client can retry the request in case the response is
	//giving `INTERNAL_ERROR` code with "publisher failed" reason.
	//
	//This identifier is necessary because on event-based protocols like WebSocket the response is
	//returned asynchronously. If there is no identifier, no way the client can tell which response
	//belongs to which request.
	//
	//Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the
	//debug logs with `ReqGUID` keyword.
	ReqGuid string `protobuf:"bytes,1,opt,name=req_guid,json=reqGuid,proto3" json:"req_guid,omitempty"`
	//
	//`sent_time` defines the time the request is sent.
	//
	//`sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
	//request is sent until the events are published.
	SentTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	//
	//`events` is where the client put all the events wrapped in `Event`.
	//
	//As mentioned above, the request allows the client to push more than one event. Normally you want to batch
	//the events to optimize the network call.
	Events []*Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_odpf_raccoon_EventRequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_odpf_raccoon_EventRequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_odpf_raccoon_EventRequest_proto_rawDescGZIP(), []int{0}
}

func (x *EventRequest) GetReqGuid() string {
	if x != nil {
		return x.ReqGuid
	}
	return ""
}

func (x *EventRequest) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *EventRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_odpf_raccoon_EventRequest_proto protoreflect.FileDescriptor

var file_odpf_raccoon_EventRequest_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x1a,
	0x18, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x47, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x4d, 0x0a, 0x16,
	0x69, 0x6f, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x72,
	0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x42, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_odpf_raccoon_EventRequest_proto_rawDescOnce sync.Once
	file_odpf_raccoon_EventRequest_proto_rawDescData = file_odpf_raccoon_EventRequest_proto_rawDesc
)

func file_odpf_raccoon_EventRequest_proto_rawDescGZIP() []byte {
	file_odpf_raccoon_EventRequest_proto_rawDescOnce.Do(func() {
		file_odpf_raccoon_EventRequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_odpf_raccoon_EventRequest_proto_rawDescData)
	})
	return file_odpf_raccoon_EventRequest_proto_rawDescData
}

var file_odpf_raccoon_EventRequest_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_odpf_raccoon_EventRequest_proto_goTypes = []interface{}{
	(*EventRequest)(nil),          // 0: odpf.raccoon.EventRequest
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*Event)(nil),                 // 2: odpf.raccoon.Event
}
var file_odpf_raccoon_EventRequest_proto_depIdxs = []int32{
	1, // 0: odpf.raccoon.EventRequest.sent_time:type_name -> google.protobuf.Timestamp
	2, // 1: odpf.raccoon.EventRequest.events:type_name -> odpf.raccoon.Event
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_odpf_raccoon_EventRequest_proto_init() }
func file_odpf_raccoon_EventRequest_proto_init() {
	if File_odpf_raccoon_EventRequest_proto != nil {
		return
	}
	file_odpf_raccoon_Event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_odpf_raccoon_EventRequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_odpf_raccoon_EventRequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_odpf_raccoon_EventRequest_proto_goTypes,
		DependencyIndexes: file_odpf_raccoon_EventRequest_proto_depIdxs,
		MessageInfos:      file_odpf_raccoon_EventRequest_proto_msgTypes,
	}.Build()
	File_odpf_raccoon_EventRequest_proto = out.File
	file_odpf_raccoon_EventRequest_proto_rawDesc = nil
	file_odpf_raccoon_EventRequest_proto_goTypes = nil
	file_odpf_raccoon_EventRequest_proto_depIdxs = nil
}
